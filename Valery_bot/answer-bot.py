import requests
from datetime import datetime
import pytz
import json
from sql import *



token = '6540959298:AAHfEFnHEcXxglWseUdLSSGWRJ-oLhoYx8o'
URL = 'https://api.telegram.org/bot'
update_id = None


def send_document(chat_id, document_path, caption=None):
    url = f'https://api.telegram.org/bot{token}/sendDocument'
    params = {
        'chat_id': chat_id,
        'caption': caption
    }
    files = {
        'document': open(document_path, 'rb')
    }
    requests.post(url, params=params, files=files)


def listen(URL, token, offset=0):
    while True:
        try:
            request = requests.get(f'{URL}{token}/getUpdates?offset={offset}').json()
            return request['result']
        except Exception:
            time.sleep(1)
            tz = pytz.timezone('Europe/Moscow')
            moscow = datetime.now(tz)
            print(f'Error getting updates, {moscow}')


def send_message(chat_id, text, buttons=None, document_path=None):
    url = f'https://api.telegram.org/bot{token}/sendMessage'

    if document_path is not None:
        url = f'https://api.telegram.org/bot{token}/sendDocument'
        params = {
            'chat_id': chat_id,
            'document': open(document_path, 'rb')
        }
    elif buttons is None:
        params = {
            'chat_id': chat_id,
            'text': text
        }
    else:
        inline = {
            'inline_keyboard': buttons
        }
        params = {
            'chat_id': chat_id,
            'text': text,
            'reply_markup': json.dumps(inline)
        }

    requests.get(url, params=params)


try:
    last_info = listen(URL, token)
except Exception:
    last_info = ''

while len(last_info) == 0:
    try:
        last_info = listen(URL, token)
        time.sleep(1)
    except Exception:
        time.sleep(1)

while True:
    try:
        last_update_info = last_info[len(last_info) - 1]['update_id']
        tz = pytz.timezone('Europe/Moscow')
        moscow = datetime.now(tz)
        print(f'----start work at: {moscow} - by Moscow time----')
        break
    except Exception:
        continue

create_tables()
print(new_password(1231231, 1, 323121))
key = None
users = []

while True:
    try:
        new_info = listen(URL, token, last_update_info)
        while len(new_info) == 0:
            new_info = listen(URL, token, last_update_info)
            time.sleep(1)
        now_update_info = new_info[len(new_info) - 1].get('update_id', None)
        if now_update_info > last_update_info:
            for elemen in new_info:
                try:
                    update_id = elemen.get('update_id', None)
                    if update_id > last_update_info:
                        msg = ''
                        if 'message' in elemen:
                            about_msg = elemen['message']
                            user_id = about_msg['from']['id']
                            chat_id = about_msg['chat']['id']
                            try:
                                teg_user = about_msg['from']['username']
                            except Exception:
                                teg_user = None
                            msg_id = about_msg['message_id']
                            first_name = about_msg['from']['first_name']
                            try:
                                last_name = about_msg['from']['last_name']
                            except Exception as error:
                                last_name = None
                            try:
                                msg = about_msg['text']
                            except Exception:
                                msg = ''
                            if msg == '':
                                try:
                                    msg = elemen['message']['caption']
                                except Exception:
                                    msg = ''
                        else:
                            about_msg = elemen['callback_query']
                            user_id = about_msg['from']['id']
                            msg_id = about_msg['message']['message_id']
                            try:
                                teg_user = about_msg['from']['username']
                            except Exception:
                                teg_user = None
                            first_name = about_msg['from']['first_name']
                            try:
                                last_name = about_msg['from']['last_name']
                            except Exception:
                                last_name = None
                            about_msg = about_msg['message']
                            chat_id = about_msg['chat']['id']
                            try:
                                data = elemen['callback_query']['data']
                                variants = elemen['callback_query']['message']['reply_markup']['inline_keyboard']
                                stop = None
                                for elements in variants:
                                    for string in elements:
                                        callback = string['callback_data']
                                        if callback == data:
                                            msg = string['text']
                                            stop = 'Y'
                                            break
                                    if stop is not None:
                                        break
                            except Exception:
                                msg = ''
                        is_admin = info_user(teg_user)
                        password = None
                        if f'–Ø –Ω–µ –Ω–∞—à–µ–ª –¥–∞–Ω–Ω—ã–µ –æ @{teg_user}' == is_admin:
                            msg = msg.replace(' ', '')
                            if 'old' == first_registration(user_id):
                                password = use_passowrd(user_id, msg)
                                if password != 'Y':
                                    error_password(user_id)
                            else:
                                send_message(user_id,
                                    '–ü—Ä–∏–≤–µ—Ç, –∂–¥—É —Ç–≤–æ–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏–ª –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ \n–í–ù–ò–ú–ê–ù–ò–ï!!! –£ –≤–∞—Å –ª–∏—à—å 3 –ø–æ–ø—ã—Ç–∫–∏ –≤–µ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á, –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã - –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–ª—é—á–∏!\n\n–ö–ª—é—á –≤–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤, —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤!')
                        if f'–Ø –Ω–µ –Ω–∞—à–µ–ª –¥–∞–Ω–Ω—ã–µ –æ @{teg_user}' != is_admin or password == 'Y':
                            status = reg_user(user_id, teg_user)
                            if status == 'new':
                                send_message(user_id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ß—Ç–æ–±—ã —è —Å–º–æ–≥ –í–∞–º –ø–æ–º–æ—á—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç –º–µ–Ω—é —Å —Ç–µ–º–æ–π –í–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ üëá')
                                result = list(set(get_accuracy_info('–≤–æ–ø—Ä–æ—Å—ã', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤')))
                                use_buttons = []
                                buttons = []
                                for number in range(len(result) + 1):
                                    if number != len(result):
                                        if number > 0 and number % 2 == 0:
                                            buttons.append(use_buttons)
                                            use_buttons = []
                                        use_buttons.append(
                                            buttons_shablon(result[number][0], number))
                                    if number == len(result):
                                        if number > 0 and number % 2 == 0:
                                            buttons.append(use_buttons)
                                            use_buttons = []
                                        use_buttons.append(buttons_shablon('–°–æ–∫—Ä–∞—â–µ–Ω–∏—è', number))
                                if use_buttons:
                                    buttons.append(use_buttons)
                                send_message(user_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', buttons)
                                users.append(shablon(user_id))
                            else:
                                if len(users) == 0:
                                    users.append(shablon(user_id))
                                else:
                                    a = 0
                                    for a in range(0, len(users)):
                                        if users[a].get('user_id', None) == user_id:
                                            a = -1
                                            break
                                    if a != -1:
                                        users.append(shablon(user_id))
                                for conteiner in users:
                                    if conteiner['user_id'] == user_id:
                                        if msg == '/start' or msg == '‚¨ÖÔ∏è' or msg.lower() == '–Ω–∞–∑–∞–¥':
                                            if conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] == '+':
                                                send_message(user_id, '‚ùå–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ "—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è"')
                                            elif conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] == '-':
                                                send_message(user_id, '‚ùå–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ "–≤–æ–ø—Ä–æ—Å"')
                                            result = list(set(get_accuracy_info('–≤–æ–ø—Ä–æ—Å—ã', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤')))
                                            use_buttons = []
                                            buttons = []
                                            for number in range(len(result) + 1):
                                                if number != len(result):
                                                    if number > 0 and number % 2 == 0:
                                                        buttons.append(use_buttons)
                                                        use_buttons = []
                                                    use_buttons.append(
                                                        buttons_shablon(result[number][0], number))
                                                if number == len(result):
                                                    if number > 0 and number % 2 == 0:
                                                        buttons.append(use_buttons)
                                                        use_buttons = []
                                                    use_buttons.append(buttons_shablon('–°–æ–∫—Ä–∞—â–µ–Ω–∏—è', number))
                                            if use_buttons:
                                                buttons.append(use_buttons)
                                            send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:', buttons)
                                            conteiner['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤'] = None
                                            conteiner['–≤–æ–ø—Ä–æ—Å'] = None
                                            conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] = None
                                            conteiner['—Ç–µ—Ä–º–∏–Ω'] = None
                                        elif conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] is None:
                                            if msg.lower() == '—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è':
                                                conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] = '+'
                                                conteiner['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤'] = '-'
                                                result = select_column('—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è', '—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ')
                                                use_buttons = []
                                                buttons = []
                                                for number in range(len(result) + 1):
                                                    if number != len(result):
                                                        if number > 0 and number % 4 == 0:
                                                            buttons.append(use_buttons)
                                                            use_buttons = []
                                                        use_buttons.append(
                                                            buttons_shablon(result[number][0], number))
                                                    if number == len(result):
                                                        if number > 0 and number % 3 == 0:
                                                            buttons.append(use_buttons)
                                                            use_buttons = []
                                                        use_buttons.append(buttons_shablon('‚¨ÖÔ∏è', number))
                                                if use_buttons:
                                                    buttons.append(use_buttons)
                                                send_message(user_id, '–ö–∞–∫–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', buttons)
                                            else:
                                                result = get_all_info('–≤–æ–ø—Ä–æ—Å—ã', '–≤–æ–ø—Ä–æ—Å', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤', msg)
                                                if result is not None and len(result) > 0:
                                                    conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] = '-'
                                                    conteiner['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤'] = msg
                                                    use_buttons = []
                                                    buttons = []
                                                    save = f'–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ {msg}:'
                                                    for number in range(len(result)+1):
                                                        if number != len(result):
                                                            save += f'\n{get_alphabet(number+1)} - {result[number][0]}'
                                                            if number > 0 and number % 3 == 0:
                                                                buttons.append(use_buttons)
                                                                use_buttons = []
                                                            use_buttons.append(buttons_shablon(f'{get_alphabet(number+1)}', number))
                                                        if number == len(result):
                                                            if number > 0 and number % 3 == 0:
                                                                buttons.append(use_buttons)
                                                                use_buttons = []
                                                            use_buttons.append(buttons_shablon('‚¨ÖÔ∏è', number))
                                                    if use_buttons:
                                                        buttons.append(use_buttons)
                                                    send_message(user_id, save, buttons)
                                                else:
                                                    result = list(
                                                        set(get_accuracy_info('–≤–æ–ø—Ä–æ—Å—ã', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤')))
                                                    use_buttons = []
                                                    buttons = []
                                                    for number in range(len(result) + 1):
                                                        if number != len(result):
                                                            if number > 0 and number % 2 == 0:
                                                                buttons.append(use_buttons)
                                                                use_buttons = []
                                                            use_buttons.append(
                                                                buttons_shablon(result[number][0], number))
                                                        if number == len(result):
                                                            if number > 0 and number % 2 == 0:
                                                                buttons.append(use_buttons)
                                                                use_buttons = []
                                                            use_buttons.append(buttons_shablon('–°–æ–∫—Ä–∞—â–µ–Ω–∏—è', number))
                                                    if use_buttons:
                                                        buttons.append(use_buttons)
                                                    send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:', buttons)
                                        else:
                                            if conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] == '+' and conteiner['—Ç–µ—Ä–º–∏–Ω'] is None:
                                                result = get_info('—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è', '—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞', '—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ', msg)
                                                if result is not None:
                                                    send_message(user_id, f'{msg} - —ç—Ç–æ {result[0]}')
                                                else:
                                                    send_message(user_id, '–¢–∞–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ—Ç –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏!\n–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –ø—Ä–æ—Å–∏–º –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–∏–Ω–µ–µ —Å–ª–æ–≤–æüëá\n -> -> /start <- <- \n–ò –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—å - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–º–æ—á—å, —Å–ø–∞—Å–∏–±–æ')
                                            elif conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] == '-' and conteiner['–≤–æ–ø—Ä–æ—Å'] is None:
                                                result = get_accuracy_info('–≤–æ–ø—Ä–æ—Å—ã', '–≤–æ–ø—Ä–æ—Å', ['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤'], [conteiner['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤']])
                                                if not msg.isdigit():
                                                    try:
                                                        maby_msg = de_alphabet(msg)
                                                        if maby_msg.isdigit():
                                                            msg = maby_msg
                                                    except Exception:
                                                        continue
                                                if msg.isdigit() and len(result) > 0:
                                                    try:
                                                        conteiner['–≤–æ–ø—Ä–æ—Å'] = result[int(msg) - 1][0]
                                                    except Exception:
                                                        conteiner['–≤–æ–ø—Ä–æ—Å'] = None
                                                    try:
                                                        result = get_accuracy_info('–≤–æ–ø—Ä–æ—Å—ã', '–æ—Ç–≤–µ—Ç', ['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤', '–≤–æ–ø—Ä–æ—Å'], [conteiner['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤'], result[int(msg)-1][0]])
                                                    except Exception as error:
                                                        result = 'N'
                                                    if result is None or result == 'N' or len(result)>1 or conteiner['–≤–æ–ø—Ä–æ—Å']  is None:
                                                        send_message(user_id, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                                                        conteiner['–≤–æ–ø—Ä–æ—Å'] = None
                                                    else:
                                                        maby_pdf = get_accuracy_info('–≤–æ–ø—Ä–æ—Å—ã', 'numberid',
                                                                                   ['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤', '–≤–æ–ø—Ä–æ—Å', '–æ—Ç–≤–µ—Ç'],
                                                                                   [conteiner['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤'], conteiner['–≤–æ–ø—Ä–æ—Å'], result[0][0]])
                                                        if len(maby_pdf) != 1:
                                                            maby_pdf = -1
                                                        else:
                                                            maby_pdf = maby_pdf[0][0]
                                                        if os.path.exists(f'{maby_pdf}.pdf'):
                                                            result = str(result[0][0]).replace(":)", "üòÉ").replace(";)", "üòâ")
                                                            send_document(user_id, f'{maby_pdf}.pdf', f'–û—Ç–≤–µ—Ç: {result}')
                                                        else:
                                                            send_message(user_id, f'–û—Ç–≤–µ—Ç: {result[0][0]}')
                                                        if conteiner['–≤–æ–ø—Ä–æ—Å'].lower() == '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã':
                                                            conteiner['–≤–æ–ø—Ä–æ—Å'] = None
                                                elif len(result) > 0 and not msg.isdigit():
                                                    send_message(user_id, 'üòê–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!\n–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ—Å–∏–º –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–∏–Ω–µ–µ —Å–ª–æ–≤–æüëá\n -> -> /start <- <- \n–ò –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—å - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–º–æ—á—å, —Å–ø–∞—Å–∏–±–æ')
                                                else:
                                                    send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ - —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –≤–æ–ø—Ä–æ—Å–∞!')
                                            if conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] is not None and conteiner['–≤–æ–ø—Ä–æ—Å'] is not None:
                                                if '+' not in conteiner['–≤–æ–ø—Ä–æ—Å']:
                                                    buttons = [
                                                        [
                                                            {
                                                                'text': '–î–∞',
                                                                'callback_data': 'button1'
                                                            },
                                                            {
                                                                'text': '–ù–µ—Ç',
                                                                'callback_data': 'button2'
                                                            }
                                                        ]
                                                    ]
                                                    send_message(user_id, '–ë—ã–ª –ª–∏ –Ω–∞—à –æ—Ç–≤–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º‚ùì', buttons)
                                                    conteiner['–≤–æ–ø—Ä–æ—Å'] = '+' + conteiner['–≤–æ–ø—Ä–æ—Å']
                                                if (msg.lower() == '–¥–∞' or msg.lower() == '–Ω–µ—Ç') and '+' == conteiner['–≤–æ–ø—Ä–æ—Å'][0:1] and len(conteiner['–≤–æ–ø—Ä–æ—Å']) > 1:
                                                    if msg.lower() == '–¥–∞':
                                                        try:
                                                            save_answer(conteiner)
                                                        except Exception as error:
                                                            print(error)
                                                        send_message(user_id,
                                                                     'üòâ–ú—ã —Ä–∞–¥—ã —á—Ç–æ —Å–º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å!')
                                                        conteiner['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤'] = None
                                                        conteiner['–≤–æ–ø—Ä–æ—Å'] = None
                                                        conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] = None
                                                        conteiner['—Ç–µ—Ä–º–∏–Ω'] = None
                                                        result = list(
                                                            set(get_accuracy_info('–≤–æ–ø—Ä–æ—Å—ã', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤')))
                                                        use_buttons = []
                                                        buttons = []
                                                        for number in range(len(result) + 1):
                                                            if number != len(result):
                                                                if number > 0 and number % 2 == 0:
                                                                    buttons.append(use_buttons)
                                                                    use_buttons = []
                                                                use_buttons.append(
                                                                    buttons_shablon(result[number][0], number))
                                                            if number == len(result):
                                                                if number > 0 and number % 2 == 0:
                                                                    buttons.append(use_buttons)
                                                                    use_buttons = []
                                                                use_buttons.append(
                                                                    buttons_shablon('–°–æ–∫—Ä–∞—â–µ–Ω–∏—è', number))
                                                        if use_buttons:
                                                            buttons.append(use_buttons)
                                                        send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:', buttons)
                                                    elif msg.lower() == '–Ω–µ—Ç':
                                                        send_message(user_id,
                                                                     'üòî–ù–∞–º –∂–∞–ª—å —á—Ç–æ –Ω–∞—à –æ—Ç–≤–µ—Ç –≤–∞–º –Ω–µ –ø–æ–º–æ–≥, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω–∞–º —Å–ª–µ–¥—É–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å?')
                                                        conteiner['–≤–æ–ø—Ä–æ—Å'] = ' - –æ—Ç–∑—ã–≤' + conteiner['–≤–æ–ø—Ä–æ—Å']
                                                elif ' - –æ—Ç–∑—ã–≤' == conteiner['–≤–æ–ø—Ä–æ—Å'][:len(' - –æ—Ç–∑—ã–≤')]:
                                                    conteiner['–≤–æ–ø—Ä–æ—Å'] = msg + conteiner['–≤–æ–ø—Ä–æ—Å']
                                                    try:
                                                        save_answer(conteiner)
                                                    except Exception as error:
                                                        print(error)
                                                    send_message(user_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç, –æ–±–µ—â–∞–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –Ω–µ–¥–æ—á–µ—Çüòâ')
                                                    conteiner['–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤'] = None
                                                    conteiner['–≤–æ–ø—Ä–æ—Å'] = None
                                                    conteiner['–≥–ª–æ—Å—Å–∞—Ä–∏–π'] = None
                                                    conteiner['—Ç–µ—Ä–º–∏–Ω'] = None
                                                    result = list(
                                                        set(get_accuracy_info('–≤–æ–ø—Ä–æ—Å—ã', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è–≤–æ–ø—Ä–æ—Å–æ–≤')))
                                                    use_buttons = []
                                                    buttons = []
                                                    for number in range(len(result) + 1):
                                                        if number != len(result):
                                                            if number > 0 and number % 2 == 0:
                                                                buttons.append(use_buttons)
                                                                use_buttons = []
                                                            use_buttons.append(
                                                                buttons_shablon(result[number][0], number))
                                                        if number == len(result):
                                                            if number > 0 and number % 2 == 0:
                                                                buttons.append(use_buttons)
                                                                use_buttons = []
                                                            use_buttons.append(
                                                                buttons_shablon('–°–æ–∫—Ä–∞—â–µ–Ω–∏—è', number))
                                                    if use_buttons:
                                                        buttons.append(use_buttons)
                                                    send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:', buttons)

                                        break

                        last_update_info = update_id
                except Exception as error:
                    print(error)
                    try:
                        if update_id is not None:
                            last_update_info = update_id
                        continue
                    except Exception:
                        print(error)
                        continue
        time.sleep(1)
    except Exception as error:
        print(error)